package com.codinginflow.mvvmtodo.di

import android.app.Application
import android.app.SharedElementCallback
import androidx.room.Room
import com.codinginflow.mvvmtodo.data.TaskDatabase
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.components.ApplicationComponent
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.SupervisorJob
import javax.inject.Qualifier
import javax.inject.Singleton

//"Object" makes generated code more efficient.
//Module is a place where we give dagger the instructions on how to create the dependencies that we need.
//we tell dagger how can it actually create a task database and taskDao -> so dagger provide it for us

//ApplicationComponent is auto generated by dagger, tell we want to use this module inside of our Application Component.
@Module
@InstallIn(ApplicationComponent::class)
object AppModule {

    @Provides
    @Singleton
    //We only need one instance of Database throughout the whole app.
    fun provideDatabase(
        app: Application,
        callback: TaskDatabase.Callback
    ) = Room.databaseBuilder(app, TaskDatabase::class.java, "task_database")
        .fallbackToDestructiveMigration()
        .addCallback(callback)
        .build()


    //Hey dagger, we need a taskDao, dagger looks and decides : to create a taskDao, I need a TaskDatabase first.
    //TaskDatabase creation is defined above,
    //Room makes Dao singleton already, so we do not have to specify @Singleton
    @Provides
    fun provideTaskDao(db: TaskDatabase) = db.taskDao()


    //SupervisorJob tells Coroutines : When a child fails, keep the other child running.
    @ApplicationScope
    @Provides
    @Singleton
    fun provideApplicationScope() = CoroutineScope(SupervisorJob())
}
//Application scope
@Retention(AnnotationRetention.RUNTIME)
@Qualifier
annotation class ApplicationScope